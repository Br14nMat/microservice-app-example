trigger:
  branches:
    include:
      - master
  paths:
    include:
      - infra/*
      - azure-pipelines-auth-api.yml
      - azure-pipelines-frontend.yml
      - azure-pipelines-log-message-proce.yml
      - azure-pipelines-todos-api.yml
      - azure-pipelines-users-api.yml

resources:
  pipelines:
  - pipeline: auth_api
    source: azure-pipelines-auth-api
    trigger: 
      branches:
        include:
          - master
  - pipeline: frontend
    source: azure-pipelines-frontend
    trigger:
      branches:
        include:
          - master
  - pipeline: log_processor
    source: azure-pipelines-log-message-proce
    trigger:
      branches:
        include:
          - master
  - pipeline: todos_api
    source: azure-pipelines-todos-api
    trigger:
      branches:
        include:
          - master
  - pipeline: users_api
    source: azure-pipelines-users-api
    trigger:
      branches:
        include:
          - master

variables:
  TERRAFORM_VERSION: '1.5.5'  # Versión de Terraform a usar
  AZURE_SUBSCRIPTION_ID: 'fab7526b-56a5-4c43-9ba1-85eb890d86d5'
  RESOURCE_GROUP: 'taller1'
  CONTAINERAPPS_ENVIRONMENT: 'microservices-env'

stages:
- stage: Destroy_Existing
  displayName: 'Eliminar recursos existentes'
  jobs:
  - job: Destroy
    displayName: 'Eliminar Container Apps'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: AzureCLI@2
      displayName: 'Eliminar apps existentes'
      inputs:
        azureSubscription: 'azure-terraform-connection'  # Nombre de tu service connection
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          if az containerapp env show -n $(CONTAINERAPPS_ENVIRONMENT) -g $(RESOURCE_GROUP) &>/dev/null; then
            echo "Eliminando Container Apps..."
            az containerapp list -g $(RESOURCE_GROUP) --query "[].name" -o tsv | xargs -I {} az containerapp delete -n {} -g $(RESOURCE_GROUP) --yes
          fi

- stage: Deploy_Infra
  displayName: 'Desplegar Infraestructura'
  dependsOn: Destroy_Existing
  jobs:
  - job: Terraform
    displayName: 'Ejecutar Terraform en Docker'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self  # Descargar el código del repositorio
    
    # Autenticación en Azure
    - task: AzureCLI@2
      displayName: 'Configurar credenciales Azure'
      inputs:
        azureSubscription: 'azure-terraform-connection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          # Guardar credenciales para que Terraform en el contenedor pueda acceder
          mkdir -p $(System.DefaultWorkingDirectory)/.azure
          az account get-access-token > $(System.DefaultWorkingDirectory)/.azure/access-token.json
          az account show > $(System.DefaultWorkingDirectory)/.azure/account.json
    
    # Ejecutar Terraform en contenedor Docker
    - task: Docker@2
      displayName: 'Inicializar y aplicar Terraform'
      inputs:
        containerRegistry: 'dockerHub'  # Usar el registry público
        repository: 'hashicorp/terraform'
        tag: $(TERRAFORM_VERSION)
        command: 'run'
        arguments: |
          -v $(System.DefaultWorkingDirectory)/.azure:/root/.azure
          -v $(System.DefaultWorkingDirectory)/infra:/infra
          -w /infra
          -e ARM_SUBSCRIPTION_ID=$(AZURE_SUBSCRIPTION_ID)
          sh -c "terraform init && terraform validate && terraform plan && terraform apply -auto-approve"
    
    # Limpieza opcional
    - script: |
        rm -rf $(System.DefaultWorkingDirectory)/.azure
      displayName: 'Limpiar credenciales temporales'
      condition: always()
