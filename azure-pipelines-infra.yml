trigger:
  branches:
    include:
      - master
  paths:
    include:
      - infra/*
      - azure-pipelines-auth-api.yml
      - azure-pipelines-frontend.yml
      - azure-pipelines-log-message-proce.yml
      - azure-pipelines-todos-api.yml
      - azure-pipelines-users-api.yml

resources:
  pipelines:
  - pipeline: auth_api
    source: azure-pipelines-auth-api
    trigger: 
      branches:
        include:
          - master
  - pipeline: frontend
    source: azure-pipelines-frontend
    trigger:
      branches:
        include:
          - master
  - pipeline: log_processor
    source: azure-pipelines-log-message-proce
    trigger:
      branches:
        include:
          - master
  - pipeline: todos_api
    source: azure-pipelines-todos-api
    trigger:
      branches:
        include:
          - master
  - pipeline: users_api
    source: azure-pipelines-users-api
    trigger:
      branches:
        include:
          - master

variables:
  - group: terraform-creds 
  - name: TERRAFORM_VERSION
    value: '1.5.5'
  - name: RESOURCE_GROUP
    value: 'taller1'
  - name: CONTAINERAPPS_ENVIRONMENT
    value: 'microservices-env'

stages:
- stage: Destroy_Existing
  displayName: 'Eliminar recursos existentes'
  condition: |
    or(
      eq(variables['Build.Reason'], 'ResourceTrigger'),
      eq(variables['Build.Reason'], 'IndividualCI'),
      eq(variables['Build.Reason'], 'BatchedCI'),
      eq(variables['Build.Reason'], 'Manual')
    )
  jobs:
  - job: Destroy
    displayName: 'Eliminar Container Apps'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: AzureCLI@2
      displayName: 'Eliminar Container Apps'
      inputs:
        azureSubscription: 'azure-terraform-connection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          if az containerapp env show -n $(CONTAINERAPPS_ENVIRONMENT) -g $(RESOURCE_GROUP) &>/dev/null; then
            echo "Eliminando Container Apps..."
            apps=$(az containerapp list --resource-group $(RESOURCE_GROUP) --query "[].name" -o tsv)
            for app in $apps; do
              echo "Eliminando $app..."
              az containerapp delete --name $app --resource-group $(RESOURCE_GROUP) --yes
            done
          else
            echo "Entorno no existe, no hay nada que eliminar"
          fi

- stage: Deploy_Infra
  displayName: 'Desplegar Infraestructura'
  dependsOn: Destroy_Existing
  jobs:
  - job: Terraform
    displayName: 'Ejecutar Terraform'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
    
    - task: TerraformInstaller@1
      displayName: 'Instalar Terraform'
      inputs:
        terraformVersion: $(TERRAFORM_VERSION)

    - script: |
        cd infra
        export ARM_SUBSCRIPTION_ID=$(AZURE_SUBSCRIPTION_ID)
        terraform init -input=false
        terraform validate
        terraform plan -out=tfplan -input=false
        terraform apply -auto-approve -input=false tfplan
      displayName: 'Terraform Init/Plan/Apply'
      env:
        ARM_CLIENT_ID: $(ARM_CLIENT_ID)
        ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
        ARM_TENANT_ID: $(ARM_TENANT_ID)
        ARM_SUBSCRIPTION_ID: $(AZURE_SUBSCRIPTION_ID)